---
- name: Determine JAVA_HOME for selected JVM RPM  # noqa blocked_modules
  ansible.builtin.shell: |
    set -o pipefail
    rpm -ql {{ activemq_jvm_package }} | grep -Po '/usr/lib/jvm/.*(?=/bin/java$)'
  args:
    executable: /bin/bash
  changed_when: False
  register: rpm_java_home

- name: "Configure sysconfig file for {{ activemq.instance_name }} {{ activemq.service_name }} service"
  become: yes
  ansible.builtin.template:
    src: amq_broker.sysconfig.j2
    dest: "/etc/sysconfig/{{ activemq.instance_name }}"
    owner: root
    group: root
    mode: 0644
  vars:
    activemq_rpm_java_home: "{{ rpm_java_home.stdout }}"
  notify:
    - restart amq_broker

- name: "Configure systemd unit file for {{ activemq.instance_name }} {{ activemq.service_name }} service"
  ansible.builtin.template:
    src: amq_broker.service.j2
    dest: "/etc/systemd/system/{{ activemq.instance_name }}.service"
    owner: root
    group: root
    mode: 0644
  become: yes
  register: systemdunit
  notify:
    - restart amq_broker

- name: "Check instance directory: {{ activemq_dest }}/{{ activemq.instance_name }}"
  ansible.builtin.stat:
    path: "{{ activemq_dest }}/{{ activemq.instance_name }}/bin"
  register: instance_directory
  become: yes

- name: "Generate artemis configuration for: {{ activemq_dest }}/{{ activemq.instance_name }}"
  ansible.builtin.include_tasks: configure.yml
  when:
    - not instance_directory.stat.exists

- name: "Create instance {{ activemq.instance_name }} of {{ activemq.service_name }}"
  ansible.builtin.command:
    cmd: "{{ activemq.home }}/bin/artemis create {{ activemq.instance_home }} {{ activemq_options }}"
    creates: "{{ activemq.instance_home }}/bin/artemis-service"
  become: yes
  become_user: "{{ activemq_service_user }}"
  register: broker_created
  when:
    - not instance_directory.stat.exists

- name: "Include post-upgrade tasks"
  ansible.builtin.include_tasks: upgrade.yml
  when:
    - instance_directory.stat.exists
    - new_version_extracted.changed

- name: "Setup clustering with jgroups"
  ansible.builtin.include_tasks: jgroups.yml
  when:
    - activemq_ha_enabled
    - activemq_cluster_discovery == 'jgroups'

- name: "Configure AMQ broker logging"
  become: yes
  ansible.builtin.template:
    src: logging.properties.j2
    dest: "{{ activemq.instance_home }}/etc/logging.properties"
    owner: "{{ activemq_service_user }}"
    group: "{{ activemq_service_group }}"
    mode: 0644
  notify:
    - restart amq_broker

- name: Create user and roles
  ansible.builtin.include_tasks: user_roles.yml
  when: activemq_users | length > 0

- name: "Configure jolokia access"
  become: yes
  ansible.builtin.template:
    src: jolokia-access.xml.j2
    dest: "{{ activemq.instance_home }}/etc/jolokia-access.xml"
    owner: "{{ activemq_service_user }}"
    group: "{{ activemq_service_group }}"
    mode: 0644
  notify:
    - restart amq_broker

- name: "Configure management.xml"
  become: yes
  ansible.builtin.template:
    src: management.xml.j2
    dest: "{{ activemq.instance_home }}/etc/management.xml"
    owner: "{{ activemq_service_user }}"
    group: "{{ activemq_service_group }}"
    mode: 0644
  notify:
    - restart amq_broker

- name: "Configure prometheus metrics"
  become: yes
  when: activemq_prometheus_enabled
  block:
    - name: Ensure lib is available to instance
      ansible.builtin.copy:
        src: "{{ activemq.home }}/lib/artemis-prometheus-metrics-plugin-1.1.0.redhat-00002.jar"
        dest: "{{ activemq.instance_home }}/lib/"
        remote_src: yes
        owner: "{{ activemq_service_user }}"
        group: "{{ activemq_service_group }}"
        mode: 0644
      notify:
        - restart amq_broker
    - name: Configure metrics plugin
      xml:
        path: "{{ activemq.instance_home }}/etc/broker.xml"
        xpath: /conf:configuration/core:core/core:metrics/core:plugin
        attribute: class-name
        value: org.apache.activemq.artemis.core.server.metrics.plugins.ArtemisPrometheusMetricsPlugin
        namespaces:
          conf: urn:activemq
          core: urn:activemq:core
      notify:
        - restart amq_broker

- name: Reload systemd
  become: yes
  ansible.builtin.systemd: # noqa no-handler definitely not a candidate for a handler, because of start/flush below
    daemon_reload: yes
  when: systemdunit.changed

- name: "Start and wait for {{ activemq.service_name }} service (first node)"
  ansible.builtin.include_tasks: start.yml
  run_once: yes
  when: activemq_db_enabled

- name: "Start and wait for {{ activemq.service_name }} service (remaining nodes)"
  ansible.builtin.include_tasks: start.yml

- name: Check service status
  ansible.builtin.command: "systemctl status {{ activemq.instance_name }}"
  register: activemq_service_status
  become: yes
  changed_when: False
  retries: 6
  delay: 5

- name: Verify service status
  ansible.builtin.assert:
    that:
      - activemq_service_status is defined
      - activemq_service_status.stdout is defined

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
