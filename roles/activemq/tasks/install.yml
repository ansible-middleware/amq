---
- name: Validate parameters
  ansible.builtin.assert:
    that:
      - activemq.home is defined
      - activemq_service_user is defined
      - activemq_dest is defined
      - activemq.bundle is defined
      - activemq.download_url is defined
      - activemq.version is defined
    quiet: true

- name: "Create {{ activemq.service_name }} service group"
  become: "{{ activemq_install_requires_become | default(true) }}"
  ansible.builtin.group:
    name: "{{ activemq_service_group }}"
    system: true

- name: "Create service user"
  block:
    - name: "Create {{ activemq.service_name }} service user"
      become: "{{ activemq_install_requires_become | default(true) }}"
      ansible.builtin.user:
        name: "{{ activemq_service_user }}"
        group: "{{ activemq_service_group }}"
        home: "{{ activemq.user_home }}"
        system: true
        create_home: false
      register: user_mod
  rescue:
    - name: Display failure
      ansible.builtin.debug:
        msg: "Update user home_directory deferred to service restart, error can be ignored"
    - name: Set update user_mod to restarting handler
      ansible.builtin.set_fact:
        requires_userhome_update: true
      notify: restart amq_broker

- name: "Check {{ activemq.service_name }} install location"
  become: "{{ activemq_install_requires_become | default(true) }}"
  ansible.builtin.stat:
    path: "{{ activemq_dest }}"
  register: install_location

- name: "Create {{ activemq.service_name }} install location"
  become: "{{ activemq_install_requires_become | default(true) }}"
  ansible.builtin.file:
    dest: "{{ activemq_dest }}"
    state: directory
    owner: "{{ activemq_service_user }}"
    group: "{{ activemq_service_group }}"
    mode: '0750'
  when:
    - not install_location.stat.exists

- name: Verify file ownership for existing install location
  ansible.builtin.command: |
    chown -R {{ activemq_service_user }}:{{ activemq_service_group }} {{ activemq_dest }}
  register: chown_status
  changed_when: chown_status.stdout != ""
  become: "{{ activemq_install_requires_become | default(true) }}"
  when:
    - install_location.stat.exists

## check remote archive
- name: Set download archive path
  ansible.builtin.set_fact:
    archive: "{{ activemq_dest }}/{{ activemq.bundle }}"

- name: Check download archive path
  become: "{{ activemq_install_requires_become | default(true) }}"
  ansible.builtin.stat:
    path: "{{ archive }}"
  register: archive_path

## download to controller
- name: Download activemq archive
  when:
    - archive_path is defined
    - archive_path.stat is defined
    - not archive_path.stat.exists
    - not amq_broker_enable is defined or not amq_broker_enable
    - not activemq_offline_install
  ansible.builtin.get_url: # noqa risky-file-permissions delegated, uses controller host user
    url: "{{ activemq.download_url }}"
    dest: "{{ local_path.stat.path }}/{{ activemq.bundle }}"
    mode: '0640'
  delegate_to: localhost
  run_once: true
  retries: 3
  delay: 20

- name: Download AMQ broker from RHN using JBoss Network API
  delegate_to: localhost
  run_once: true
  when:
    - archive_path is defined
    - archive_path.stat is defined
    - not archive_path.stat.exists
    - amq_broker_enable is defined and amq_broker_enable
    - not activemq_offline_install
    - rhn_username is defined and rhn_password is defined
  block:
    - name: Retrieve product download using JBoss Network API
      middleware_automation.common.product_search:
        client_id: "{{ rhn_username }}"
        client_secret: "{{ rhn_password }}"
        product_type: DISTRIBUTION
        product_version: "{{ amq_broker_version | regex_replace('7[.]([89])[.]', '7.0\\1.') }}"
        product_category: "{{ amq_broker_product_category }}"
      register: rhn_products
      delegate_to: localhost
      run_once: true

    - name: Determine install zipfile from search results
      ansible.builtin.set_fact:
        rhn_filtered_products: "{{ rhn_products.results | selectattr('file_path', 'match', '.*/amq-broker-' + amq_broker_version + '-bin.zip') }}"
      delegate_to: localhost
      run_once: true

    - name: Download AMQ Broker
      middleware_automation.common.product_download:
        client_id: "{{ rhn_username }}"
        client_secret: "{{ rhn_password }}"
        product_id: "{{ (rhn_filtered_products | first).id }}"
        dest: "{{ local_path.stat.path }}/{{ activemq.bundle }}"
      no_log: "{{ omit_rhn_output | default(true) }}"
      delegate_to: localhost
      run_once: true

- name: Check downloaded archive
  ansible.builtin.stat:
    path: "{{ local_path.stat.path }}/{{ activemq.bundle }}"
  register: local_archive_path
  delegate_to: localhost

## copy and unpack
- name: Copy archive to target nodes
  ansible.builtin.copy:
    src: "{{ local_path.stat.path }}/{{ activemq.bundle }}"
    dest: "{{ archive }}"
    owner: "{{ activemq_service_user }}"
    group: "{{ activemq_service_group }}"
    mode: '0750'
  register: new_version_downloaded
  when:
    - not archive_path.stat.exists
    - local_archive_path.stat is defined
    - local_archive_path.stat.exists
  become: "{{ activemq_install_requires_become | default(true) }}"

- name: "Check target directory: {{ activemq.home }}"
  ansible.builtin.stat:
    path: "{{ activemq.home }}"
  register: path_to_workdir
  become: "{{ activemq_install_requires_become | default(true) }}"

- name: "Extract zipfile"
  when:
    - new_version_downloaded.changed or not path_to_workdir.stat.exists
  block:
    - name: "Extract {{ activemq.name }} archive on target"
      ansible.builtin.unarchive: # noqa no-handler definitely not a candidate for a handler
        remote_src: true
        src: "{{ archive }}"
        dest: "{{ activemq_dest }}"
        owner: "{{ activemq_service_user }}"
        group: "{{ activemq_service_group }}"
        list_files: true
      become: "{{ activemq_install_requires_become | default(true) }}"
      register: new_version_extracted
      when:
        - new_version_downloaded.changed or not path_to_workdir.stat.exists
      notify:
        - restart amq_broker

    - name: "Check target directory: {{ activemq.home }}"
      ansible.builtin.stat:
        path: "{{ activemq.home }}"
      register: path_to_workdir_after_extract
      become: "{{ activemq_install_requires_become | default(true) }}"

    - name: Link zipfile directory to wanted directory
      become: "{{ activemq_install_requires_become | default(true) }}"
      ansible.builtin.file:
        state: link
        src: "{{ activemq_dest }}/{{ new_version_extracted.files | first }}"
        dest: "{{ activemq.home }}"
        owner: "{{ activemq_service_user }}"
        group: "{{ activemq_service_group }}"
      when:
        - not path_to_workdir_after_extract.stat.exists

- name: Inform decompression was not executed
  ansible.builtin.debug: # noqa no-handler definitely not a candidate for a handler
    msg: "{{ activemq.home }} already exists and version unchanged, skipping decompression"
  when:
    - not new_version_downloaded.changed and path_to_workdir.stat.exists
