---
- name: Retrieve existing users
  ansible.builtin.slurp:
    src: "{{ activemq.instance_home }}/etc/artemis-users.properties"
  register: existing_users
  become: "{{ activemq_install_requires_become | default(true) }}"

- name: Set masked user passwords
  ansible.builtin.include_tasks: mask_password.yml
  loop: "{{ activemq_users }}"
  loop_control:
    label: "{{ item.user }}"

- name: Configure users
  ansible.builtin.template:
    src: artemis-users.properties.j2
    dest: "{{ activemq.instance_home }}/etc/artemis-users.properties"
    owner: "{{ activemq_service_user }}"
    group: "{{ activemq_service_group }}"
    mode: '0640'
  no_log: false
  become: "{{ activemq_install_requires_become | default(true) }}"

- name: Set unique role lists
  ansible.builtin.set_fact:
    unique_security_settings_roles: "{{ activemq_roles | map(attribute='name') | list | unique | sort }}"
    unique_default_managmement_roles: "{{ activemq_management_access_default | map(attribute='roles') | flatten | unique | sort }}"
    unique_managmement_roles: "{{ activemq_management_access_domains | map(attribute='accesses') | flatten | map(attribute='roles') | flatten | unique | sort }}"

- name: Collect all activemq roles
  ansible.builtin.set_fact:
    all_roles: "{{ activemq_hawtio_roles | unique | union(unique_security_settings_roles) | \
                   union(unique_default_managmement_roles) | union(unique_managmement_roles) | sort }}"

- name: Configure roles
  ansible.builtin.template:
    src: artemis-roles.properties.j2
    dest: "{{ activemq.instance_home }}/etc/artemis-roles.properties"
    owner: "{{ activemq_service_user }}"
    group: "{{ activemq_service_group }}"
    mode: '0640'
  become: "{{ activemq_install_requires_become | default(true) }}"

- name: Create security settings matches
  ansible.builtin.set_fact:
    security_settings_matches: "{{ security_settings_matches | default({}) | \
                                   combine( { match: { item.1: [ item.0.name ] }  }, recursive=true, list_merge='append' ) }}"
  vars:
    match: "{{ item.0.match | default('#') }}"
  loop: "{{ activemq_roles | subelements('permissions') }}"
  loop_control:
    label: "{{ item.0.match | default('#') }}"

- name: Create security settings
  ansible.builtin.set_fact:
    security_settings: "{{ security_settings | default([]) + [ lookup('template', 'security_settings.broker.xml.j2', wantlist=true) ] }}"
  loop: "{{ security_settings_matches | dict2items(key_name='match', value_name='permissions') }}"

- name: Create messaging roles permissions
  middleware_automation.common.xml:
    path: "{{ activemq.instance_home }}/etc/broker.xml"
    xpath: /conf:configuration/core:core/core:security-settings
    input_type: xml
    set_children: "{{ security_settings | flatten }}"
    namespaces:
      conf: urn:activemq
      core: urn:activemq:core
    pretty_print: true
  become: "{{ activemq_install_requires_become | default(true) }}"
  notify:
    - restart amq_broker with no config refresh

- name: "Update hawtio role"
  ansible.builtin.lineinfile:
    path: "{{ activemq.instance_home }}/etc/artemis.profile"
    regexp: '^HAWTIO_ROLES?=.*'
    line: "HAWTIO_ROLE{{ hawtio_roles }}='{{ activemq_hawtio_roles | unique | union(unique_default_managmement_roles) | \
                                      union(unique_managmement_roles) | sort | join(',') }}'"
  become: "{{ activemq_install_requires_become | default(true) }}"
  vars:
    hawtio_roles: "{{ '' if (not amq_broker_enable | default(false) and activemq_version is version_compare('2.40.0', '<')) \
                      or (amq_broker_enable | default(false) and activemq_version is version_compare('7.13.0', '<')) else 'S' }}"
  notify:
    - restart amq_broker

- name: Ensure management.xml has no comments (lxml bug workaround)
  ansible.builtin.replace:
    path: "{{ activemq.instance_home }}/etc/management.xml"
    regexp: '<!--[\s\S]*?-->'
    replace: ''
  become: "{{ activemq_install_requires_become | default(true) }}"

- name: Create management access default
  ansible.builtin.set_fact:
    management_access_default: "{{ management_access_default | default([]) | union(lookup('template', 'default_access.management.xml.j2') | from_yaml | default([])) }}"
  loop: "{{ activemq_management_access_default }}"
  loop_control:
    loop_var: default_access
    label: "{{ default_access.roles|join(',') }}: {{ default_access.methods|join(',') }}"

- name: Create management access domains
  ansible.builtin.set_fact:
    management_access_domains: "{{ management_access_domains | default([]) | union(lookup('template', 'role_access.management.xml.j2') | from_yaml | default([])) }}"
  loop: "{{ activemq_management_access_domains }}"
  loop_control:
    loop_var: access_domains
    label: "key: {{ access_domains.key | default('') }}, name: {{ access_domains.name | default('') }}"

- name: Create management default access configuration
  middleware_automation.common.xml:
    path: "{{ activemq.instance_home }}/etc/management.xml"
    xpath: //*[local-name()='default-access']
    input_type: yaml
    set_children: "{{ management_access_default }}"
    pretty_print: true
  become: "{{ activemq_install_requires_become | default(true) }}"
  notify:
    - restart amq_broker

- name: Create management access roles configuration
  middleware_automation.common.xml:
    path: "{{ activemq.instance_home }}/etc/management.xml"
    xpath: //*[local-name()='role-access']
    input_type: yaml
    set_children: "{{ management_access_domains }}"
    pretty_print: true
  become: "{{ activemq_install_requires_become | default(true) }}"
  notify:
    - restart amq_broker

- name: Create a copy of the schema to correct for validation
  ansible.builtin.copy:
    src: "{{ activemq_schema_src }}"
    dest: "{{ activemq.instance_home }}/etc/activemq_fix.xsd"
    mode: '0644'
    remote_src: true
  become: "{{ activemq_install_requires_become | default(true) }}"
  changed_when: false

- name: Create correct non-deterministic model in XSD
  ansible.builtin.replace:
    path: "{{ activemq.instance_home }}/etc/activemq_fix.xsd"
    regexp: '(<xs:element ref="tns:server"/>)\s*<xs:element ref="tns:web" minOccurs="0"/>'
    replace: '\1'
  become: "{{ activemq_install_requires_become | default(true) }}"
  changed_when: false

- name: Validate access configuration
  middleware_automation.common.xml:
    xsd_path: "{{ activemq.instance_home }}/etc/activemq_fix.xsd"
    path: "{{ activemq.instance_home }}/etc/management.xml"
    validate: true
    input_type: xml
  become: "{{ activemq_install_requires_become | default(true) }}"
  no_log: false
